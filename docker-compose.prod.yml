services:
  db:
    extends:
      file: docker-compose.base.yml
      service: db
    networks:
      - wasp-network

  backend:
    container_name: wasp-backend-prod
    build:
      context: ./myapp/app/.wasp-prod/build
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - WASP_WEB_CLIENT_URL=${WASP_WEB_CLIENT_URL}
      - WASP_SERVER_URL=${WASP_SERVER_URL}
      - JWT_SECRET=${JWT_SECRET}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - MAILGUN_API_URL=${MAILGUN_API_URL}
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
    ports:
      - "${APP_BACKEND_PORT}:3001"
    networks:
      - wasp-network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    image: nginx:latest
    restart: unless-stopped
    container_name: wasp-frontend-prod
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ./myapp/app/.wasp-prod/build/web-app/build:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

  blog:
    image: nginx:latest
    restart: unless-stopped
    container_name: wasp-blog-prod
    ports:
      - "${BLOG_PORT}:80"
    volumes:
      - ./myapp/blog/dist:/usr/share/nginx/html

  pgadmin:
    extends:
      file: docker-compose.base.yml
      service: pgadmin
    networks:
      - wasp-network

volumes:
  postgres_data:
    name: wasp_postgres_data
  pgadmin_data:
    name: wasp_pgadmin_data

networks:
  wasp-network:
    name: wasp-network
